// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mocks/client_mock.go
//

// Package mock_zvuk is a generated GoMock package.
package mock_zvuk

import (
	context "context"
	io "io"
	reflect "reflect"

	zvuk "github.com/oshokin/zvuk-grabber/internal/client/zvuk"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DownloadFromURL mocks base method.
func (m *MockClient) DownloadFromURL(ctx context.Context, url string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFromURL", ctx, url)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFromURL indicates an expected call of DownloadFromURL.
func (mr *MockClientMockRecorder) DownloadFromURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFromURL", reflect.TypeOf((*MockClient)(nil).DownloadFromURL), ctx, url)
}

// FetchTrack mocks base method.
func (m *MockClient) FetchTrack(ctx context.Context, trackURL string) (*zvuk.FetchTrackResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTrack", ctx, trackURL)
	ret0, _ := ret[0].(*zvuk.FetchTrackResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTrack indicates an expected call of FetchTrack.
func (mr *MockClientMockRecorder) FetchTrack(ctx, trackURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTrack", reflect.TypeOf((*MockClient)(nil).FetchTrack), ctx, trackURL)
}

// GetAlbumURL mocks base method.
func (m *MockClient) GetAlbumURL(releaseID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumURL", releaseID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumURL indicates an expected call of GetAlbumURL.
func (mr *MockClientMockRecorder) GetAlbumURL(releaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumURL", reflect.TypeOf((*MockClient)(nil).GetAlbumURL), releaseID)
}

// GetAlbumsMetadata mocks base method.
func (m *MockClient) GetAlbumsMetadata(ctx context.Context, releaseIDs []string, withTracks bool) (*zvuk.GetAlbumsMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsMetadata", ctx, releaseIDs, withTracks)
	ret0, _ := ret[0].(*zvuk.GetAlbumsMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsMetadata indicates an expected call of GetAlbumsMetadata.
func (mr *MockClientMockRecorder) GetAlbumsMetadata(ctx, releaseIDs, withTracks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsMetadata", reflect.TypeOf((*MockClient)(nil).GetAlbumsMetadata), ctx, releaseIDs, withTracks)
}

// GetArtistReleaseIDs mocks base method.
func (m *MockClient) GetArtistReleaseIDs(ctx context.Context, artistID string, offset, limit int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistReleaseIDs", ctx, artistID, offset, limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistReleaseIDs indicates an expected call of GetArtistReleaseIDs.
func (mr *MockClientMockRecorder) GetArtistReleaseIDs(ctx, artistID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistReleaseIDs", reflect.TypeOf((*MockClient)(nil).GetArtistReleaseIDs), ctx, artistID, offset, limit)
}

// GetAudiobooksMetadata mocks base method.
func (m *MockClient) GetAudiobooksMetadata(ctx context.Context, audiobookIDs []string) (*zvuk.GetAudiobooksMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudiobooksMetadata", ctx, audiobookIDs)
	ret0, _ := ret[0].(*zvuk.GetAudiobooksMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAudiobooksMetadata indicates an expected call of GetAudiobooksMetadata.
func (mr *MockClientMockRecorder) GetAudiobooksMetadata(ctx, audiobookIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudiobooksMetadata", reflect.TypeOf((*MockClient)(nil).GetAudiobooksMetadata), ctx, audiobookIDs)
}

// GetBaseURL mocks base method.
func (m *MockClient) GetBaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockClientMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockClient)(nil).GetBaseURL))
}

// GetChapterStreamMetadata mocks base method.
func (m *MockClient) GetChapterStreamMetadata(ctx context.Context, chapterIDs []string) (map[string]*zvuk.ChapterStreamMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChapterStreamMetadata", ctx, chapterIDs)
	ret0, _ := ret[0].(map[string]*zvuk.ChapterStreamMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChapterStreamMetadata indicates an expected call of GetChapterStreamMetadata.
func (mr *MockClientMockRecorder) GetChapterStreamMetadata(ctx, chapterIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChapterStreamMetadata", reflect.TypeOf((*MockClient)(nil).GetChapterStreamMetadata), ctx, chapterIDs)
}

// GetLabelsMetadata mocks base method.
func (m *MockClient) GetLabelsMetadata(ctx context.Context, labelIDs []string) (map[string]*zvuk.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsMetadata", ctx, labelIDs)
	ret0, _ := ret[0].(map[string]*zvuk.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelsMetadata indicates an expected call of GetLabelsMetadata.
func (mr *MockClientMockRecorder) GetLabelsMetadata(ctx, labelIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsMetadata", reflect.TypeOf((*MockClient)(nil).GetLabelsMetadata), ctx, labelIDs)
}

// GetPlaylistsMetadata mocks base method.
func (m *MockClient) GetPlaylistsMetadata(ctx context.Context, playlistIDs []string) (*zvuk.GetPlaylistsMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistsMetadata", ctx, playlistIDs)
	ret0, _ := ret[0].(*zvuk.GetPlaylistsMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistsMetadata indicates an expected call of GetPlaylistsMetadata.
func (mr *MockClientMockRecorder) GetPlaylistsMetadata(ctx, playlistIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistsMetadata", reflect.TypeOf((*MockClient)(nil).GetPlaylistsMetadata), ctx, playlistIDs)
}

// GetPodcastsMetadata mocks base method.
func (m *MockClient) GetPodcastsMetadata(ctx context.Context, podcastIDs []string) (*zvuk.GetPodcastsMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodcastsMetadata", ctx, podcastIDs)
	ret0, _ := ret[0].(*zvuk.GetPodcastsMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodcastsMetadata indicates an expected call of GetPodcastsMetadata.
func (mr *MockClientMockRecorder) GetPodcastsMetadata(ctx, podcastIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodcastsMetadata", reflect.TypeOf((*MockClient)(nil).GetPodcastsMetadata), ctx, podcastIDs)
}

// GetStreamMetadata mocks base method.
func (m *MockClient) GetStreamMetadata(ctx context.Context, trackID, quality string) (*zvuk.StreamMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamMetadata", ctx, trackID, quality)
	ret0, _ := ret[0].(*zvuk.StreamMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamMetadata indicates an expected call of GetStreamMetadata.
func (mr *MockClientMockRecorder) GetStreamMetadata(ctx, trackID, quality any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamMetadata", reflect.TypeOf((*MockClient)(nil).GetStreamMetadata), ctx, trackID, quality)
}

// GetTrackLyrics mocks base method.
func (m *MockClient) GetTrackLyrics(ctx context.Context, trackID string) (*zvuk.Lyrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackLyrics", ctx, trackID)
	ret0, _ := ret[0].(*zvuk.Lyrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackLyrics indicates an expected call of GetTrackLyrics.
func (mr *MockClientMockRecorder) GetTrackLyrics(ctx, trackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackLyrics", reflect.TypeOf((*MockClient)(nil).GetTrackLyrics), ctx, trackID)
}

// GetTracksMetadata mocks base method.
func (m *MockClient) GetTracksMetadata(ctx context.Context, trackIDs []string) (map[string]*zvuk.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksMetadata", ctx, trackIDs)
	ret0, _ := ret[0].(map[string]*zvuk.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksMetadata indicates an expected call of GetTracksMetadata.
func (mr *MockClientMockRecorder) GetTracksMetadata(ctx, trackIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksMetadata", reflect.TypeOf((*MockClient)(nil).GetTracksMetadata), ctx, trackIDs)
}

// GetUserProfile mocks base method.
func (m *MockClient) GetUserProfile(ctx context.Context) (*zvuk.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx)
	ret0, _ := ret[0].(*zvuk.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockClientMockRecorder) GetUserProfile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockClient)(nil).GetUserProfile), ctx)
}
