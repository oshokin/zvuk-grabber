version: "3"

silent: true

vars:
  # -------------------------------
  # Platform Configuration
  # -------------------------------

  # Path separator per OS.
  PS: '{{fromSlash "/"}}'

  # Cross-platform mkdir/rm helpers.
  RMRF: '{{if eq OS "windows"}}powershell.exe -Command "Remove-Item -Force -Recurse -ErrorAction SilentlyContinue -Path{{else}}rm -rf{{end}}'
  RMRF_END: '{{if eq OS "windows"}}; exit 0"{{end}}'
  MKDIR: '{{if eq OS "windows"}}powershell.exe -Command "New-Item -ItemType Directory -Force -Path{{else}}mkdir -p{{end}}'
  MKDIR_END: '{{if eq OS "windows"}} | Out-Null"{{end}}'

  # -------------------------------
  # Project Directories
  # -------------------------------

  # Local bin & temp dirs (kept in repo root).
  LOCAL_BIN: "{{.TASKFILE_DIR}}{{.PS}}bin"
  APP: "zvuk-grabber"
  APP_BINARY: "{{.LOCAL_BIN}}{{.PS}}{{.APP}}{{exeExt}}"

  # -------------------------------
  # Tool Versions
  # -------------------------------

  # Linting tool version.
  GOLANGCI_TAG: "latest"
  # GoMock binary version (uber-go/mock fork).
  MOCKGEN_TAG: "v0.6.0"

  # -------------------------------
  # Tool Binaries
  # -------------------------------

  GOLANGCI_BIN: "{{.LOCAL_BIN}}{{.PS}}golangci-lint{{exeExt}}"
  MOCKGEN_BIN: "{{.LOCAL_BIN}}{{.PS}}mockgen{{exeExt}}"

  # -------------------------------
  # Version Detection
  # -------------------------------

  # Commands to check current versions of installed tools.
  GOLANGCI_VERSION_OUTPUT:
    sh: '{{if eq OS "windows"}}powershell -Command "try { if (Test-Path ''{{.GOLANGCI_BIN}}'') { & ''{{.GOLANGCI_BIN}}'' version } } catch { }; exit 0"{{else}}"{{.GOLANGCI_BIN}}" version 2> /dev/null || true{{end}}'
  MOCKGEN_VERSION_OUTPUT:
    sh: '{{if eq OS "windows"}}powershell -Command "try { if (Test-Path ''{{.MOCKGEN_BIN}}'') { & ''{{.MOCKGEN_BIN}}'' -version } } catch { }; exit 0"{{else}}"{{.MOCKGEN_BIN}}" -version 2> /dev/null || true{{end}}'

  # Regex patterns to extract version numbers from tool outputs.
  GOLANGCI_CURRENT_TAG: '{{regexFind "v([0-9]+.){2}([0-9a-z])+" (regexFind "version v([0-9]+.){2}([0-9a-z])+ " .GOLANGCI_VERSION_OUTPUT)}}'
  MOCKGEN_CURRENT_TAG: '{{regexFind "v([0-9]+.){2}([0-9a-z])+" .MOCKGEN_VERSION_OUTPUT}}'

  # -------------------------------
  # Configuration Files
  # -------------------------------

  GOLANGCI_CONFIG: ".golangci.yaml"
  GOLANGCI_STRICT_CONFIG: ".golangci-strict.yaml"

  # -------------------------------
  # Version Detection and Injection
  # -------------------------------

  # Detect the latest semantic version tag (v1.2.3 format only).
  # Note: This variable is computed before deps run.
  # For fresh tags, use dynamic detection in build task.
  LATEST_SEMVER_TAG:
    sh: 'git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 2>/dev/null || echo ""'

  # Current Git commit hash for build metadata.
  GIT_COMMIT:
    sh: 'git rev-parse --short HEAD 2>/dev/null || echo "dev"'

  # Build timestamp in UTC ISO format.
  BUILD_TIME:
    sh: '{{if eq OS "windows"}}powershell -Command "Get-Date -UFormat \"%Y-%m-%dT%H:%M:%SZ\""{{else}}date -u +"%Y-%m-%dT%H:%M:%SZ"{{end}}'

tasks:
  # -------------------------------
  # Default & Help
  # -------------------------------

  default:
    cmds:
      - task -l

  # -------------------------------
  # Tool Installation
  # -------------------------------

  _ensure-bin:
    internal: true
    cmds:
      - '{{.MKDIR}} ''{{.LOCAL_BIN}}''{{.MKDIR_END}}'

  install-lint:
    desc: "Install golangci-lint into ./bin"
    deps: [_ensure-bin]
    cmds:
      - |
        # Only install if current version doesn't match desired version.
        {{if (not (eq .GOLANGCI_CURRENT_TAG .GOLANGCI_TAG))}}
          echo "Installing golangci-lint, version: {{.GOLANGCI_TAG}}..."
          {{if eq OS "windows"}}
            powershell.exe -Command "\$env:GOBIN = '{{.LOCAL_BIN}}'; go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_TAG}}"
          {{else}}
            go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_TAG}}
          {{end}}
        {{end}}
    env:
      GOBIN: "{{.LOCAL_BIN}}"

  install-mockgen:
    desc: "Install mockgen into ./bin"
    deps: [_ensure-bin]
    cmds:
      - |
        # Only install if current version doesn't match desired version.
        {{if (not (eq .MOCKGEN_CURRENT_TAG .MOCKGEN_TAG))}}
          echo "Installing mockgen, version: {{.MOCKGEN_TAG}}..."
          {{if eq OS "windows"}}
            powershell.exe -Command "\$env:GOBIN = '{{.LOCAL_BIN}}'; go install go.uber.org/mock/mockgen@{{.MOCKGEN_TAG}}"
          {{else}}
            go install go.uber.org/mock/mockgen@{{.MOCKGEN_TAG}}
          {{end}}
        {{end}}
    env:
      GOBIN: "{{.LOCAL_BIN}}"

  install-tools:
    desc: "Install golangci-lint and mockgen"
    deps: [install-lint, install-mockgen]

  # -------------------------------
  # Git Hooks
  # -------------------------------

  install-githooks:
    desc: "Configure Git hooks for this repository"
    cmds:
      - |
        echo "Setting up Git hooks..."
        git config --local core.hooksPath .githooks
        {{if ne OS "windows"}}
          chmod +x .githooks/commit-msg
        {{end}}
        echo "Git hooks configured successfully!"
        echo "Commit messages must now start with: fix:, feat:, or major:"

  remove-githooks:
    desc: "Disable Git hooks for this repository"
    cmds:
      - |
        echo "Disabling Git hooks..."
        git config --local --unset core.hooksPath || echo "Hooks path was not set"
        echo "Git hooks disabled. You can now use any commit message format."

  # -------------------------------
  # Code Generation
  # -------------------------------

  generate-mocks:
    desc: "Generate all mocks using go generate"
    deps: [install-mockgen] # Ensure mockgen is installed before running.
    cmds:
      - echo "Generating mocks for all interfaces..."
      - go generate ./...
      - echo "Mock generation completed successfully!"
    env:
      # Set MOCKGEN environment variable to the local binary path.
      MOCKGEN: "{{.MOCKGEN_BIN}}"

  # -------------------------------
  # Code Quality
  # -------------------------------

  lint-fix:
    desc: "Run golangci-lint with --fix (includes gofmt formatting)"
    deps: [install-lint]
    cmds:
      - '"{{.GOLANGCI_BIN}}" config verify'
      - '"{{.GOLANGCI_BIN}}" run --fix'

  lint:
    desc: "Run golangci-lint (no fix)"
    deps: [install-lint]
    cmds:
      - '"{{.GOLANGCI_BIN}}" config verify'
      - '"{{.GOLANGCI_BIN}}" run'

  lint-full:
    desc: "Run golangci-lint on all files"
    deps: [install-lint]
    cmds:
      - '"{{.GOLANGCI_BIN}}" config verify --config={{.GOLANGCI_CONFIG}}'
      - '"{{.GOLANGCI_BIN}}" run --config={{.GOLANGCI_CONFIG}}'

  lint-full-fix:
    desc: "Run golangci-lint on all files with --fix (includes gofmt formatting)"
    deps: [install-lint]
    cmds:
      - '"{{.GOLANGCI_BIN}}" config verify --config={{.GOLANGCI_CONFIG}}'
      - '"{{.GOLANGCI_BIN}}" run --config={{.GOLANGCI_CONFIG}} --fix'

  # -------------------------------
  # Testing
  # -------------------------------

  test:
    desc: "Run unit tests"
    cmds:
      - go test -v ./...

  test-race:
    desc: "Run unit tests with race detector"
    cmds:
      - |
        {{if eq OS "windows"}}
          echo "Note: Race detector requires CGO. If this fails, install gcc (MinGW-w64) or use WSL."
          powershell.exe -Command "\$env:CGO_ENABLED = '1'; go test -race -v ./..."
        {{else}}
          go test -race -v ./...
        {{end}}
    env:
      CGO_ENABLED: "1"

  # -------------------------------
  # Build & Release
  # -------------------------------

  build:
    desc: "Build the {{.APP}} binary"
    cmds:
      # Create the local bin directory if it doesn't exist.
      - '{{.MKDIR}} ''{{.LOCAL_BIN}}''{{.MKDIR_END}}'
      - |
        echo "Building {{.APP}}..."
        go build -o "{{.APP_BINARY}}" main.go
        echo "Build completed successfully!"

  run:
    desc: "Run the {{.APP}} binary"
    cmds:
      - |
        if [ ! -f "{{.APP_BINARY}}" ]; then
          echo "Binary not found, building..."
          task build # Build the binary if it doesn't exist
        fi
        "{{.APP_BINARY}}" # Run the application binary

  # -------------------------------
  # Cleanup
  # -------------------------------

  clean:
    desc: "Remove binaries and temporary files"
    cmds:
      - '{{.RMRF}} ''{{.LOCAL_BIN}}''{{.RMRF_END}}'

  # -------------------------------
  # Version Management
  # -------------------------------

  fetch-tags:
    desc: "Fetch tags from origin"
    cmds:
      - |
        echo "Fetching tags from origin..."
        git fetch --tags

  version-check:
    desc: "Check what the next version would be based on commits"
    deps: [fetch-tags]
    cmds:
      - |
        echo "Analyzing commits for version bump..."
        {{if eq OS "windows"}}
          powershell -ExecutionPolicy Bypass -File scripts/semver_next.ps1
        {{else}}
          bash scripts/semver_next.sh
        {{end}}
