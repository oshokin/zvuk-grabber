version: "3"

silent: true

vars:
  # Platform-specific path separator and commands.
  PS: '{{fromSlash "/"}}' # Path separator for the current operating system

  # Command to recursively remove files and directories.
  # On Windows, PowerShell is used because it lacks a native `rm -rf` equivalent.
  RMRF: '{{if eq OS "windows"}}powershell Remove-Item -Force -Recurse -ErrorAction SilentlyContinue{{else}}rm -rf{{end}}'

  # Command to create directories.
  # On Windows, PowerShell is used because it lacks a native `mkdir -p` equivalent.
  MKDIR: '{{if eq OS "windows"}}powershell New-Item -ItemType Directory -Force{{else}}mkdir -p{{end}}'

  # Local binary directory and application paths.
  LOCAL_BIN: "{{.TASKFILE_DIR}}{{.PS}}bin" # Directory for locally installed binaries
  APP: "zvuk-grabber" # Name of the application
  APP_BINARY: "{{.LOCAL_BIN}}{{.PS}}{{.APP}}{{exeExt}}" # Path to the application binary
  GOLANGCI_BIN: "{{.LOCAL_BIN}}{{.PS}}golangci-lint{{exeExt}}" # Path to the golangci-lint binary

  # Always install the latest version of golangci-lint.
  GOLANGCI_TAG: "latest" # Tag for the latest version of golangci-lint
  GOLANGCI_VERSION_OUTPUT:
    sh: '"{{.GOLANGCI_BIN}}" version 2> /dev/null || true' # Get the current golangci-lint version, suppressing errors

  # These regex expressions are complex because the regexFind function doesn't support named groups, \d, \w, or \s.
  # First, we find 'version vXXX.XXX.XXXaaa ', then extract vXXX.XXX.XXXaaa from the result.
  GOLANGCI_CURRENT_TAG: '{{regexFind "v([0-9]+.){2}([0-9a-z])+" (regexFind "version v([0-9]+.){2}([0-9a-z])+ " .GOLANGCI_VERSION_OUTPUT)}}'

  # Golangci-lint configuration files.
  # The first configuration is for normal checks, while the second is stricter for identifying potential issues.
  GOLANGCI_CONFIG: ".golangci.yaml" # Default configuration file
  GOLANGCI_STRICT_CONFIG: ".golangci-strict.yaml" # Strict configuration file for more rigorous checks

  # GoMock binary path and version management.
  MOCKGEN_BIN: "{{.LOCAL_BIN}}{{.PS}}mockgen{{exeExt}}" # Path to the mockgen binary

  # Always install the latest version of mockgen.
  MOCKGEN_TAG: "v1.6.0" # Tag for the specific version of mockgen
  MOCKGEN_VERSION_OUTPUT:
    sh: '"{{.MOCKGEN_BIN}}" -version 2> /dev/null || true' # Get the current mockgen version, suppressing errors

  # Extract current mockgen version tag.
  MOCKGEN_CURRENT_TAG: '{{regexFind "v([0-9]+.){2}([0-9a-z])+" .MOCKGEN_VERSION_OUTPUT}}'

  # -------------------------------
  # Version Detection and Injection
  # -------------------------------

  # Detect the latest semantic version tag (v1.2.3 format only).
  # Note: This variable is computed before deps run.
  # For fresh tags, use dynamic detection in build task.
  LATEST_SEMVER_TAG:
    sh: 'git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 2>/dev/null || echo ""'

  # Current Git commit hash for build metadata.
  GIT_COMMIT:
    sh: 'git rev-parse --short HEAD 2>/dev/null || echo "dev"'

  # Build timestamp in UTC ISO format.
  BUILD_TIME:
    sh: '{{if eq OS "windows"}}powershell -Command "Get-Date -UFormat \"%Y-%m-%dT%H:%M:%SZ\""{{else}}date -u +"%Y-%m-%dT%H:%M:%SZ"{{end}}'

  # Clean version string (strip 'v' prefix) for injection.
  CLEAN_VERSION:
    sh: |
      if [[ -n "{{.LATEST_SEMVER_TAG}}" ]]; then
        echo "{{.LATEST_SEMVER_TAG}}" | sed 's/^v//'
      else
        echo ""
      fi

  # Build flags for version injection (only set if semantic tag exists).
  VERSION_LDFLAGS:
    sh: |
      if [[ -n "{{.LATEST_SEMVER_TAG}}" ]]; then
        echo "-s -w -X github.com/oshokin/zvuk-grabber/internal/version.Version={{.CLEAN_VERSION}} -X github.com/oshokin/zvuk-grabber/internal/version.Commit={{.GIT_COMMIT}} -X github.com/oshokin/zvuk-grabber/internal/version.BuildTime={{.BUILD_TIME}}"
      else
        echo ""
      fi

tasks:
  # -------------------------------
  # Default & Help
  # -------------------------------

  default:
    cmds:
      - task -l

  # -------------------------------
  # Development Environment Setup
  # -------------------------------

  install-lint:
    desc: "Install golangci-lint if not already installed or if the version doesn't match"
    cmds:
      # Create the local bin directory if it doesn't exist.
      - '{{.MKDIR}} "{{.LOCAL_BIN}}"'
      - |
        {{if (not (eq .GOLANGCI_CURRENT_TAG .GOLANGCI_TAG))}}
          echo "Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_TAG}} # Install the required version
        {{end}}
    env:
      # Set GOBIN to install golangci-lint in the local bin directory.
      GOBIN: "{{.LOCAL_BIN}}"

  install-mockgen:
    desc: "Install mockgen if not already installed or if the version doesn't match"
    cmds:
      # Create the local bin directory if it doesn't exist.
      - '{{.MKDIR}} "{{.LOCAL_BIN}}"'
      - |
        {{if (not (eq .MOCKGEN_CURRENT_TAG .MOCKGEN_TAG))}}
          echo "Installing mockgen..."
          go install github.com/golang/mock/mockgen@{{.MOCKGEN_TAG}} # Install the required version
        {{end}}
    env:
      # Set GOBIN to install mockgen in the local bin directory.
      GOBIN: "{{.LOCAL_BIN}}"

  install-githooks:
    desc: "Configure Git hooks for this repository"
    cmds:
      - |
        echo "Setting up Git hooks..."
        git config --local core.hooksPath .githooks
        chmod +x .githooks/commit-msg
        echo "Git hooks configured successfully!"
        echo "Commit messages must now start with: fix:, feat:, or major:"

  remove-githooks:
    desc: "Disable Git hooks for this repository"
    cmds:
      - |
        echo "Disabling Git hooks..."
        git config --local --unset core.hooksPath || echo "Hooks path was not set"
        chmod -x .githooks/commit-msg 2>/dev/null || echo "Hook file not found"
        echo "Git hooks disabled. You can now use any commit message format."

  # -------------------------------
  # Code Generation
  # -------------------------------

  generate-mocks:
    desc: "Generate all mocks using go generate"
    deps: [install-mockgen] # Ensure mockgen is installed before running
    cmds:
      - echo "Generating mocks for all interfaces..."
      - go generate ./...
      - echo "Mock generation completed successfully!"
    env:
      # Set MOCKGEN environment variable to the local binary path
      MOCKGEN: "{{.MOCKGEN_BIN}}"

  # -------------------------------
  # Code Quality & Linting
  # -------------------------------

  lint:
    desc: "Run standard golangci-lint checks on changed files"
    # Ensure golangci-lint is installed before running.
    deps: [install-lint]
    cmds:
      # Run with the default configuration.
      - '"{{.GOLANGCI_BIN}}" run --new-from-rev=origin/master --config={{.GOLANGCI_CONFIG}}'

  lint-fix:
    desc: "Run standard golangci-lint checks on changed files and auto-fix"
    # Ensure golangci-lint is installed before running.
    deps: [install-lint]
    cmds:
      # Run with auto-fix.
      - '"{{.GOLANGCI_BIN}}" run --new-from-rev=origin/master --config={{.GOLANGCI_CONFIG}} --fix'

  lint-full:
    desc: "Run standard golangci-lint checks on all files"
    # Ensure golangci-lint is installed before running.
    deps: [install-lint]
    cmds:
      # Run for all files with the default configuration.
      - '"{{.GOLANGCI_BIN}}" run --config={{.GOLANGCI_CONFIG}}'

  lint-full-fix:
    desc: "Run standard golangci-lint checks on all files and auto-fix"
    # Ensure golangci-lint is installed before running.
    deps: [install-lint]
    cmds:
      # Run for all files with auto-fix.
      - '"{{.GOLANGCI_BIN}}" run --config={{.GOLANGCI_CONFIG}} --fix'

  # -------------------------------
  # Testing
  # -------------------------------

  test:
    desc: "Run all tests with verbose output"
    cmds:
      # Run tests with verbose output.
      - go test -v ./...

  test-race:
    desc: "Run tests with race detector enabled"
    cmds:
      - '{{if eq OS "windows"}}echo "Ensure gcc is installed or use WSL for a smoother experience"{{end}}' # Windows-specific note
      # Run tests with the race detector enabled.
      - go test -race -v ./...
    env:
      # Enable CGo for the race detector.
      CGO_ENABLED: "1"

  # -------------------------------
  # Build & Release
  # -------------------------------

  build:
    desc: "Build the {{.APP}} binary with version injection"
    cmds:
      # Create the local bin directory if it doesn't exist.
      - '{{.MKDIR}} "{{.LOCAL_BIN}}"'
      - |
        # Fetch latest tags and detect version AFTER deps have run
        git fetch --tags origin >/dev/null 2>&1 || true

        # Dynamically detect the latest semantic version tag
        LATEST_TAG=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 2>/dev/null || echo "")

        if [[ -n "$LATEST_TAG" ]]; then
          CLEAN_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
          GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "dev")
          BUILD_TIME=$({{if eq OS "windows"}}powershell -Command "Get-Date -UFormat \"%Y-%m-%dT%H:%M:%SZ\""{{else}}date -u +"%Y-%m-%dT%H:%M:%SZ"{{end}})
          VERSION_LDFLAGS="-s -w -X github.com/oshokin/zvuk-grabber/internal/version.Version=$CLEAN_VERSION -X github.com/oshokin/zvuk-grabber/internal/version.Commit=$GIT_COMMIT -X github.com/oshokin/zvuk-grabber/internal/version.BuildTime=$BUILD_TIME"
          
          echo "Found semantic version tag: $LATEST_TAG"
          echo "Building release version $CLEAN_VERSION with metadata injection..."
          go build -ldflags "$VERSION_LDFLAGS" -o "{{.APP_BINARY}}" main.go
          
          echo "Build completed successfully!"
          echo "Version info: $CLEAN_VERSION (commit: $GIT_COMMIT, built: $BUILD_TIME)"
        else
          echo "No semantic version tags found (v*.*.* format)"
          echo "Building development version without injection..."
          go build -o "{{.APP_BINARY}}" main.go
          
          echo "Build completed successfully!"
          echo "Tip: Create a semantic version tag (e.g., 'git tag v1.0.0') to enable version injection"
        fi

  run:
    desc: "Run the {{.APP}} binary"
    cmds:
      - |
        if [ ! -f "{{.APP_BINARY}}" ]; then
          echo "Binary not found, building..."
          task build # Build the binary if it doesn't exist
        fi
        "{{.APP_BINARY}}" # Run the application binary

  # -------------------------------
  # Cleanup & Maintenance
  # -------------------------------

  clean:
    desc: "Remove the {{.APP}} binary"
    cmds:
      # Remove the application binary.
      - cmd: '{{.RMRF}} "{{.APP_BINARY}}"'
        # Ignore errors if the binary doesn't exist.
        ignore_error: true

  # -------------------------------
  # Version Management
  # -------------------------------

  version-pull-tags:
    desc: "Fetch latest tags from remote"
    cmds:
      - git fetch --tags origin
    silent: false
